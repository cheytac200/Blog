{"version":3,"sources":["components/PostList/PostList.jsx","components/NewPost/NewPost.jsx","components/PostDetail/PostDetail.jsx","hooks/useRequest.js","components/CommentsList/CommentsList.jsx","components/CommentForm/CommentForm.jsx","containers/PostDetailContainer/PostDetailContainer.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["PostList","loading","posts","onSelectPost","onDelete","onEditPost","className","map","post","title","body","type","onClick","bind","id","NewPost","onSubmit","editablePost","useState","postTitle","setTitle","postBody","setBody","isEditable","setIsEditable","clearForm","useEffect","Object","keys","length","placeholder","value","required","onChange","event","target","preventDefault","PostDetail","currentPost","useRequest","setLoading","request","url","a","fetch","response","json","result","Error","data","method","headers","JSON","stringify","del","put","CommentsList","comments","comment","CommentForm","useRef","ref","current","PostDetailContainer","setComments","loadComments","addCommentHandler","postId","newComment","prev","load","then","App","setPosts","setCurrentPost","setEditablePost","loadPosts","handlerSubmitPost","newPost","prevState","item","newData","handlerDeletePost","window","confirm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de160ecd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PostList.scss';\n\nexport const PostList = ({\n  loading,\n  posts,\n  onSelectPost,\n  onDelete,\n  onEditPost,\n}) => (\n  <div className=\"PostList\">\n    <h2>Posts:</h2>\n    {loading ? (\n      <p>Loading data...</p>) : (\n        <>\n          {posts.map(post => (\n            <ul className=\"PostList__list\" key={post.id}>\n              <li\n                className=\"PostList__item\"\n              >\n                <h3>{post.title}</h3>\n                <p>{post.body}</p>\n                <div className=\"PostList__buttons\">\n                  <button\n                    type=\"button\"\n                    className=\"PostList__button\"\n                    onClick={onSelectPost.bind('', post)}\n                  >\n                    Post details\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    className=\"PostList__button\"\n                    onClick={onEditPost.bind('', post)}\n                  >\n                    Edit\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    className=\"PostList__button\"\n                    onClick={onDelete.bind('', post.id)}\n                  >\n                    Delete\n                  </button>\n\n                </div>\n              </li>\n            </ul>\n          ))\n          }\n        </>\n    )\n    }\n  </div>\n);\n\nPostList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  posts: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  onSelectPost: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onEditPost: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewPost.scss';\n\nexport const NewPost = ({ onSubmit, editablePost }) => {\n  const [postTitle, setTitle] = useState('');\n  const [postBody, setBody] = useState('');\n  const [isEditable, setIsEditable] = useState(false);\n\n  const clearForm = () => {\n    setTitle('');\n    setBody('');\n  };\n\n  const handeSubmit = (event) => {\n    event.preventDefault();\n\n    if (!postTitle && !postBody) {\n      return;\n    }\n\n    onSubmit({\n      title: postTitle,\n      body: postBody,\n    });\n\n    clearForm();\n  };\n\n  useEffect(() => {\n    setIsEditable(Object.keys(editablePost).length !== 0);\n    if (isEditable) {\n      setTitle(editablePost.title);\n      setBody(editablePost.body);\n    } else {\n      clearForm();\n    }\n  }, [editablePost, isEditable]);\n\n  return (\n    <div className=\"NewPost\">\n      <input\n        className=\"NewPost__inp title\"\n        type=\"text\"\n        placeholder=\"Enter a title\"\n        value={postTitle || ''}\n        required\n        onChange={event => setTitle(event.target.value)}\n      />\n\n      <textarea\n        className=\"NewPost__inp body\"\n        type=\"text\"\n        placeholder=\"Enter a text\"\n        value={postBody || ''}\n        required\n        onChange={event => setBody(event.target.value)}\n      />\n\n      <button\n        type=\"button\"\n        onClick={handeSubmit}\n        className=\"NewPost__button\"\n      >\n        {isEditable\n          ? 'Edit current post'\n          : 'Add new post'}\n      </button>\n    </div>\n  );\n};\n\nNewPost.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  editablePost: PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const PostDetail = ({ currentPost }) => (\n  <div className=\"postDetail\">\n    <h2>Post Detail</h2>\n    <h3>{currentPost.title}</h3>\n    <p>{currentPost.body}</p>\n  </div>\n);\n\nPostDetail.propTypes = {\n  currentPost: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useState } from 'react';\n\nexport const useRequest = () => {\n  const [loading, setLoading] = useState(false);\n  // const [error, setError] = useState('');\n\n  const request = async(url) => {\n    try {\n      setLoading(true);\n      const response = await fetch(url);\n      const result = await response.json();\n\n      setLoading(false);\n\n      return result;\n    } catch (e) {\n      throw new Error(e);\n    }\n  };\n\n  // eslint-disable-next-line consistent-return\n  const post = async(url, data) => {\n    try {\n      if (!loading) {\n        setLoading(true);\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json;charset=utf-8',\n          },\n          body: JSON.stringify(data),\n        });\n\n        setLoading(false);\n\n        const result = await response.json();\n\n        setLoading(false);\n\n        return result;\n      }\n    } catch (e) {\n      throw new Error(e);\n    }\n  };\n\n  // eslint-disable-next-line consistent-return\n  const del = async(url, id) => {\n    try {\n      if (!loading) {\n        setLoading(true);\n        const response = await fetch(`${url}/${id}`, {\n          method: 'DELETE',\n        });\n\n        const result = await response.json();\n\n        setLoading(false);\n\n        return result;\n      }\n    } catch (e) {\n      throw new Error(e);\n    }\n  };\n\n  // eslint-disable-next-line consistent-return\n  const put = async(url, id, data) => {\n    try {\n      if (!loading) {\n        setLoading(true);\n        const response = await fetch(`${url}/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json;charset=utf-8',\n          },\n          body: JSON.stringify(data),\n        });\n\n        const result = await response.json();\n\n        setLoading(false);\n\n        return result;\n      }\n    } catch (e) {\n      throw new Error(e);\n    }\n  };\n\n  return {\n    loading,\n    request,\n    post,\n    del,\n    put,\n  };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const CommentsList = ({ comments, loading }) => (\n  <div>\n    <h2>Comments:</h2>\n    {loading\n      ? 'Loading comments...'\n      : comments\n    && comments.map(comment => <p key={comment.id}>{comment.body}</p>)\n    }\n  </div>\n);\n\nCommentsList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({}),\n  ).isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n","import React, { useRef } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport './CommentForm.scss';\n\nexport const CommentForm = ({ onSubmit }) => {\n  const comment = useRef();\n\n  const submitHandler = () => {\n    if (comment.current.value) {\n      onSubmit(comment.current.value);\n      comment.current.value = '';\n    }\n  };\n\n  return (\n    <div className=\"newComment\">\n      <textarea\n        type=\"text\"\n        placeholder=\"Enter new comment...\"\n        ref={comment}\n        className=\"newComment__text\"\n      />\n      <button\n        type=\"button\"\n        onClick={submitHandler}\n        className=\"newComment__btn\"\n      >\n        Add comment\n      </button>\n    </div>\n  );\n};\n\nCommentForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { PostDetail } from '../../components/PostDetail/PostDetail';\nimport { useRequest } from '../../hooks/useRequest';\nimport { CommentsList } from '../../components/CommentsList/CommentsList';\nimport { CommentForm } from '../../components/CommentForm/CommentForm';\n\nexport const PostDetailContainer = ({ currentPost }) => {\n  const [comments, setComments] = useState([]);\n\n  const { post, request, loading } = useRequest();\n\n  const loadComments = async() => {\n    const data = await request(\n      `https://bloggy-api.herokuapp.com/posts/${\n        currentPost.id}?_embed=comments`,\n    );\n\n    if (data) {\n      setComments(data.comments);\n    }\n  };\n\n  const addCommentHandler = async(comment) => {\n    const newComment = await post(\n      'https://bloggy-api.herokuapp.com/comments',\n      {\n        postId: currentPost.id,\n        body: comment,\n      },\n    );\n\n    setComments(prev => [newComment, ...prev]);\n  };\n\n  useEffect(() => {\n    const load = async() => {\n      await loadComments();\n    };\n\n    load().then();\n  }, [currentPost]);\n\n  return (\n    <>\n      <PostDetail currentPost={currentPost} />\n      <CommentsList comments={comments} loading={loading} />\n      <CommentForm onSubmit={addCommentHandler} />\n    </>\n  );\n};\n\nPostDetailContainer.propTypes = {\n  currentPost: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import './App.scss';\nimport React, { useEffect, useState } from 'react';\n\nimport { PostList } from './components/PostList/PostList';\nimport { NewPost } from './components/NewPost/NewPost';\nimport { PostDetailContainer } from\n  './containers/PostDetailContainer/PostDetailContainer';\nimport { useRequest } from './hooks/useRequest';\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [currentPost, setCurrentPost] = useState({});\n  const [editablePost, setEditablePost] = useState({});\n  const { post, request, loading, del, put } = useRequest();\n\n  const loadPosts = async() => {\n    const data = await request('https://bloggy-api.herokuapp.com/posts');\n\n    setPosts(data);\n  };\n\n  // const handlerSelectPost = (cuPost) => {\n  //   setCurrentPost(currentPost);\n  // };\n\n  const handlerSubmitPost = async(newPost) => {\n    if (Object.keys(editablePost).length !== 0) {\n      await put(\n        'https://bloggy-api.herokuapp.com/posts',\n        editablePost.id, newPost,\n      );\n\n      setPosts(prevState => prevState.map((item) => {\n        if (item.id === editablePost.id) {\n          return {\n            ...item,\n            ...newPost,\n          };\n        }\n\n        return item;\n      }));\n      setEditablePost({});\n    } else {\n      const newData = await post(\n        'https://bloggy-api.herokuapp.com/posts', newPost,\n      );\n\n      setPosts(prevState => [newData, ...prevState]);\n    }\n  };\n\n  const handlerDeletePost = async(id) => {\n    const shouldDelete = window.confirm(\n      'Вы действительно хотите удалить этот пост?',\n    );\n\n    if (shouldDelete) {\n      await del('https://bloggy-api.herokuapp.com/posts', id);\n      await loadPosts();\n    }\n  };\n\n  // const handlerEditPost = (post) => {\n  //   setEditablePost(post);\n  // };\n\n  useEffect(() => {\n    const load = async() => {\n      await loadPosts();\n    };\n\n    load().then();\n  }, []);\n\n  return (\n    <main className=\"App__main\">\n      <div className=\"App__sidebar\">\n        <NewPost\n          loading={loading}\n          onSubmit={handlerSubmitPost}\n          editablePost={editablePost}\n        />\n        <PostList\n          loading={loading}\n          posts={posts}\n          onSelectPost={setCurrentPost}\n          onDelete={handlerDeletePost}\n          onEditPost={setEditablePost}\n        />\n      </div>\n      <div className=\"App__content\">\n        {Object.keys(currentPost).length !== 0 && (\n          <PostDetailContainer loading={loading} currentPost={currentPost} />\n        )}\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}